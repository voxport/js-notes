            // Метод **`sort()`** в JavaScript используется для сортировки элементов массива и изменяет порядок элементов в исходном массиве. 
            // Он не создает новый отсортированный массив, а изменяет порядок элементов в исходном массиве.

            // Метод **`sort()`** может принимать необязательную функцию обратного вызова (callback function), которая определяет порядок сортировки. 
            // Эта функция принимает два аргумента (a, b) - первый и второй элементы, которые нужно сравнить.
            // Если первый аргумент меньше второго, функция должна вернуть отрицательное число, чтобы поместить первый элемент перед вторым. 
            // Если первый аргумент больше второго, функция должна вернуть положительное число, чтобы поместить первый элемент после второго. 
            // Если элементы равны, функция должна вернуть 0.

            // Если функция обратного вызова не указана, элементы сортируются в алфавитном порядке (для строк) или в порядке возрастания (для чисел).

// Пример:

// Сортировать массив в порядке убывания:

const allNumber = [1, 2, 3, 4, 5];          // переменная allNumber принимает массив чисел;
    allNumber.sort((a, b) => b - a);        // к переменной применячется метод sort. В скобках указываются аргументы (a, b). 
                                            // После стрелочной функции следуют параменты сортировки (b - a), то есть, что от большего (b) к меньшему (a) 
    
    console.log(allNumber);

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------

const allNumber2 = [1, 2, 3, 4, 5];          // переменная allNumber принимает массив чисел;
    allNumber2.sort((a, b) => a - b);        // к переменной применячется метод sort. В скобках указываются аргументы (a, b). 
                                            // После стрелочной функции следуют параменты сортировки (b - a), то есть, что от большего (b) к меньшему (a) 
    
    console.log(allNumber2);